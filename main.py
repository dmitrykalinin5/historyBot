import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import json
import os

token = "8178537704:AAEQrPjGPzx6dVjgchrSYlf4ksRDvg5iW0o"
bot = telebot.TeleBot(token)

# –ü–∞–ø–∫–∞ —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å—Ü–µ–Ω–∞–º–∏
SCENE_DIR = "story"

user_states = {}
user_karma = {}  # <--- —Ç–µ–ø–µ—Ä—å –∫–∞—Ä–º–∞ —Ö—Ä–∞–Ω–∏—Ç—Å—è –ø–æ chat_id

def changeKarma(chat_id, delta):
    user_karma[chat_id] = user_karma.get(chat_id, 50) + int(delta)

def load_scene(scene_key):
    path = os.path.join(SCENE_DIR, f"{scene_key}.json")
    if not os.path.exists(path):
        return None
    with open(path, "r", encoding="utf-8") as f:
        return json.load(f)

def send_scene(chat_id, scene_key):
    scene = load_scene(scene_key)
    if not scene:
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞: —Å—Ü–µ–Ω–∞ '{scene_key}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    user_states[chat_id] = scene_key
    karma = user_karma.get(chat_id, 50)
    text = scene["text"]
    markup = InlineKeyboardMarkup()

    for choice in scene.get("choices", []):
        btn = InlineKeyboardButton(choice["text"], callback_data=choice["text"])
        markup.add(btn)

    bot.send_message(chat_id, f"{text}\n\nüß≠ –ö–∞—Ä–º–∞: {karma}", reply_markup=markup)

@bot.message_handler(commands=["start"])
def start(message):
    chat_id = message.chat.id
    user_karma[chat_id] = 50  # –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è‚ÑπÔ∏è", callback_data="information"))
    markup.add(InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∏–≥—Ä—ÉüéÆ", callback_data="startGame"))

    with open("startphoto.jpg", "rb") as photo:
        bot.send_photo(
            chat_id,
            photo,
            caption="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ, –≤—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—åüëá:",
            reply_markup=markup
        )

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    chat_id = call.message.chat.id
    data = call.data
    try:
        bot.answer_callback_query(call.id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ answer_callback_query: {e}")


    if data == "information":
        bot.send_message(chat_id, "‚ÑπÔ∏è –≠—Ç–æ —Å—é–∂–µ—Ç–Ω–∞—è –∏–≥—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º. –í—ã–±–∏—Ä–∞–π—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏ –≤–ª–∏—è–π—Ç–µ –Ω–∞ –∫–∞—Ä–º—É.")
        return

    if data == "startGame":
        user_states[chat_id] = "startGame"  # –ø–µ—Ä–≤–∞—è —Å—Ü–µ–Ω–∞
        user_karma[chat_id] = 50  # —Å–±—Ä–æ—Å –∫–∞—Ä–º—ã
        send_scene(chat_id, "startGame")
        return

    if data == "–ó–∞–≤–µ—Ä—à–∏—Ç—å":
        karma = user_karma.get(chat_id, 50)
        if karma <= 25:
            status = "üíÄ –¢—ã –ø—Ä–µ–¥–∞–ª –†–æ–¥–∏–Ω—É."
        elif 50 <= karma <= 75:
            status = "ü™ñ –¢—ã –¥–æ—Å—Ç–æ–π–Ω—ã–π —Å–æ–ª–¥–∞—Ç."
        elif karma > 75:
            status = "üèÖ –¢—ã –≥–µ—Ä–æ–π —Å–≤–æ–µ–π —Å—Ç—Ä–∞–Ω—ã!"
        else:
            status = ""

        result_message = f" –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n –¢–≤–æ—è –∫–∞—Ä–º–∞: {karma}"
        if status:
            result_message += f"\n\n{status}"

        # üëá –ö–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="startGame"))

        bot.send_message(chat_id, result_message, reply_markup=markup)
        return

    current_scene_key = user_states.get(chat_id)
    if not current_scene_key:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É —Å–Ω–∞—á–∞–ª–∞ –∫–æ–º–∞–Ω–¥–æ–π /start.")
        return

    current_scene = load_scene(current_scene_key)
    if not current_scene:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—É—â–µ–π —Å—Ü–µ–Ω—ã.")
        return

    next_scene = None
    for choice in current_scene.get("choices", []):
        if choice["text"] == data:
            next_scene = choice["next"]
            karma_change = choice.get("karma")
            if karma_change is not None:
                changeKarma(chat_id, karma_change)
            break

    if next_scene:
        try:
            bot.delete_message(chat_id, call.message.message_id)
        except:
            pass
        send_scene(chat_id, next_scene)
    else:
        bot.send_message(chat_id, "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –≤—ã–±–æ—Ä.")


bot.remove_webhook()
bot.polling()
