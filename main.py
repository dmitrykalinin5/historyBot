import time

import requests
import telebot
from datetime import datetime
from requests import ReadTimeout
from telebot.apihelper import ApiTelegramException
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import json
import os

token = "8178537704:AAEQrPjGPzx6dVjgchrSYlf4ksRDvg5iW0o"
bot = telebot.TeleBot(token)

SCENE_DIR = "story"

user_states = {}
user_karma = {}

def changeKarma(chat_id, delta):
    user_karma[chat_id] = user_karma.get(chat_id, 50) + int(delta)

def load_scene(scene_key):
    path = os.path.join(SCENE_DIR, f"{scene_key}.json")
    if not os.path.exists(path):
        return None
    with open(path, "r", encoding="utf-8") as f:
        return json.load(f)

def send_scene(chat_id, scene_key):
    scene = load_scene(scene_key)
    if not scene:
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞: —Å—Ü–µ–Ω–∞ '{scene_key}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    karma = user_karma.get(chat_id, 50)
    text = scene["text"]
    markup = InlineKeyboardMarkup()

    choices = scene.get("choices", [])
    for idx, choice in enumerate(choices):
        btn = InlineKeyboardButton(choice["text"], callback_data=str(idx))
        markup.add(btn)

    user_states[chat_id] = {
        "scene": scene_key,
        "choices": choices
    }

    image_path = scene.get("image_path")

    if image_path and os.path.exists(image_path):
        try:
            with open(image_path, "rb") as photo:
                bot.send_photo(
                    chat_id,
                    photo,
                    caption=f"{text}",
                    reply_markup=markup
                )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
            bot.send_message(chat_id, f"{text}", reply_markup=markup)
    else:
        print(f"–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –ø—É—Ç–∏: {image_path}")
        try:
            bot.send_message(chat_id, f"{text}", reply_markup=markup)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ü–µ–Ω—ã: {e}")





@bot.message_handler(commands=["start"])
def start(message):
    chat_id = message.chat.id
    user_karma[chat_id] = 50
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è‚ÑπÔ∏è", callback_data="information"))
    markup.add(InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∏–≥—Ä—ÉüéÆ", callback_data="startGame"))
    markup.add(InlineKeyboardButton("üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é", callback_data="suggestIdea"))  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞

    with open("startphoto.jpg", "rb") as photo:
        try:
            bot.send_photo(
                chat_id,
                photo,
                caption="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ, –≤—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—åüëá:",
                reply_markup=markup
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")


@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):

    chat_id = call.message.chat.id
    data = call.data

    try:
        bot.answer_callback_query(call.id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ answer_callback_query: {e}")

    if data == "cancel_idea":
        if user_states.get(chat_id) == "suggesting":
            user_states.pop(chat_id, None)
            bot.send_message(chat_id, "‚ùå –í–≤–æ–¥ –∏–¥–µ–∏ –æ—Ç–º–µ–Ω—ë–Ω.")
        else:
            bot.send_message(chat_id, "‚ö†Ô∏è –í—ã –Ω–µ –≤–≤–æ–¥–∏—Ç–µ –∏–¥–µ—é –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.")
        return


    if data == "information":
        bot.send_message(chat_id, "‚ÑπÔ∏è –≠—Ç–æ —Å—é–∂–µ—Ç–Ω–∞—è –∏–≥—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º. –í—ã–±–∏—Ä–∞–π—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏ –≤–ª–∏—è–π—Ç–µ –Ω–∞ –∫–∞—Ä–º—É.")
        return

    if data == "startGame":
        user_karma[chat_id] = 50
        send_scene(chat_id, "startGame")
        return

    if data == "suggestIdea":
        user_states[chat_id] = "suggesting"
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥", callback_data="cancel_idea"))
        bot.send_message(
            chat_id,
            "‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ—é –∏–¥–µ—é, –∏ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –µ—ë —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º!\n–ù–µ –±–µ—Å–ø–æ–∫–æ–π—Ç–µ—Å—å, –≤—Å—ë –∞–Ω–æ–Ω–∏–º–Ω–æ.",
            reply_markup=markup
        )
        return

    if data == "end_game":
        karma = user_karma.get(chat_id, 50)
        if karma <= 25:
            status = "üíÄ –¢—ã –ø—Ä–µ–¥–∞–ª –†–æ–¥–∏–Ω—É."
        elif 50 <= karma <= 75:
            status = "ü™ñ –¢—ã –¥–æ—Å—Ç–æ–π–Ω—ã–π —Å–æ–ª–¥–∞—Ç."
        elif karma > 75:
            status = "üèÖ –¢—ã –≥–µ—Ä–æ–π —Å–≤–æ–µ–π —Å—Ç—Ä–∞–Ω—ã!"
        else:
            status = ""

        result_message = f" –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n –¢–≤–æ—è –∫–∞—Ä–º–∞: {karma}"
        if status:
            result_message += f"\n\n{status}"

        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="startGame"))

        bot.send_message(chat_id, result_message, reply_markup=markup)
        return

    user_state = user_states.get(chat_id)
    if not user_state:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É —Å–Ω–∞—á–∞–ª–∞ –∫–æ–º–∞–Ω–¥–æ–π /start.")
        return

    scene_key = user_state["scene"]
    choices = user_state["choices"]

    try:
        index = int(data)
        choice = choices[index]
    except (ValueError, IndexError):
        bot.send_message(chat_id, "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –≤—ã–±–æ—Ä.")
        return

    next_scene = choice.get("next")
    karma_change = choice.get("karma")
    if karma_change is not None:
        changeKarma(chat_id, karma_change)

    try:
        bot.delete_message(chat_id, call.message.message_id)
    except:
        pass

    if next_scene == "end_game":
        handle_callback(type("Call", (), {"message": call.message, "data": "end_game", "id": call.id})())
    else:
        send_scene(chat_id, next_scene)


@bot.message_handler(func=lambda message: True)
def handle_text(message):
    chat_id = message.chat.id

    if user_states.get(chat_id) == "suggesting":
        idea_text = message.text.strip()
        username = message.from_user.username or f"id_{chat_id}"
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        try:
            with open("ideas.txt", "a", encoding="utf-8") as f:
                f.write(f"[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}]\n")
                f.write(f"[–í—Ä–µ–º—è: {timestamp}]\n")
                f.write(f"–ò–¥–µ—è: {idea_text}\n")
                f.write("-" * 40 + "\n")
            bot.send_message(chat_id, "‚úÖ –°–ø–∞—Å–∏–±–æ! –¢–≤–æ—è –∏–¥–µ—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –∏–¥–µ–∏: {e}")
            bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–¥–µ–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        user_states.pop(chat_id, None)


bot.remove_webhook()
while True:
    try:
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        bot.polling(non_stop=True, interval=0, timeout=20)
    except (ReadTimeout, ConnectionError, requests.exceptions.RequestException, ApiTelegramException) as e:
        print(f"[‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è]: {e}")
        time.sleep(5)
    except Exception as e:
        print(f"[‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞]: {e}")
        time.sleep(5)
